Image
	- The application we want to run
Container
	- An instance of that image running as a process
Docker Hub
  - Image hub
  
----------------------------------------------------------------------------------------------------
Network:

Port format:
$-p host:container
$1 container = 1 port on host is allowed

Bridge - Docker 0 (network bridge)
	- Default docker
	- Virtual network
	- Which is NAT'ed behind the host IP

Host
	- Network host
	- Gains performance by skipping virtual networks but sacrifices security by container model


----------------------------------------------------------------------------------------------------
Container Lifetime & Persistent Data
- How to achieve persistent data in Docker?
	- Two ways
	1. Volumes
	 - make special location outside of container UFS
	 - if you want to delete a volume (you need to do it manually)
	- you can rename it upon creation (-v)
	- or you can manually create it 
	$docker volume create
	 
	2. Bind Mounts
	- link container path to host path, just like map files
	-  -v $(pwd):/usr/share/nginx/html nginx

Exercise w/ Named Volumes:
Database upgrades with containers.
1. Create postgres with 9.6.1 version and named volume psql-data
3. Create new postgres 9.6.2 with same named volume container.

$ docker container run --name postgres -e POSTGRES_HOST_AUTH_METHOD=trust -d -v psql-data:/var/lib/post
$ docker container logs postgres
$ docker volume ls
$ docker container run --name postgres2 -e POSTGRES_HOST_AUTH_METHOD=trust -d -v psql-data:/var/lib/p
ostgresql/data -d postgres:9.6.2

Exercise w/ Bind Mounts:



----------------------------------------------------------------------------------------------------




